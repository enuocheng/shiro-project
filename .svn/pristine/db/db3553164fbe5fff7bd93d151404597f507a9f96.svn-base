package cn.mycloudedu.user.biz

import java.util.{List => JavaList,HashMap=>JavaHashMap}
import cn.mycloudedu.framework.core.result.{PageOrder, PageResult}
import cn.mycloudedu.user.dao.{CompanyMapper, PositionMapper}
import cn.mycloudedu.user.domain.{Company, Position}
import cn.mycloudedu.user.dto._
import cn.mycloudedu.user.param.SearchPositionParam
import com.github.pagehelper.{PageHelper, PageInfo}
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Service


/**
  * Created by e诺
  * on 2017/4/20
  * Time 下午2:01
  */
@Service
class HomePageBiz {
  @Autowired val companyMapper: CompanyMapper = null
  @Autowired val positionMapper: PositionMapper = null

  def hotCompany(pageOrder: PageOrder): PageResult[JavaHashMap[String,Any]] = {
    PageHelper.startPage(pageOrder.getCurrent, pageOrder.getPageSize)
    PageHelper.orderBy(pageOrder.getOrderBy(classOf[Company]))
    val list: JavaList[JavaHashMap[String,Any]] = companyMapper.hotCompany()
    val pageInfo = new PageInfo[JavaHashMap[String,Any]](list)
    val pageResult = new PageResult[JavaHashMap[String,Any]](pageOrder, pageInfo)
    pageResult
  }

  def recommendPosition(pageOrder: PageOrder): PageResult[RecommendPositionDTO] = {
    PageHelper.startPage(pageOrder.getCurrent, pageOrder.getPageSize)
    PageHelper.orderBy(pageOrder.getOrderBy(classOf[Position]))
    val list: JavaList[RecommendPositionDTO] = positionMapper.recommendPosition()
    val pageInfo = new PageInfo[RecommendPositionDTO](list)
    val pageResult = new PageResult[RecommendPositionDTO](pageOrder, pageInfo)
    pageResult
  }

  def searchPosition(param: SearchPositionParam, pageOrder: PageOrder): PageResult[RecommendPositionDTO] = {
    PageHelper.startPage(pageOrder.getCurrent, pageOrder.getPageSize)
    PageHelper.orderBy(pageOrder.getOrderBy(classOf[Position]))
    val list: JavaList[RecommendPositionDTO] = positionMapper.searchPosition(param)
    val pageInfo = new PageInfo[RecommendPositionDTO](list)
    val pageResult = new PageResult[RecommendPositionDTO](pageOrder, pageInfo)
    pageResult
  }

  def getPositionDetails(positionId: Int): PositionDetailsDTO = {
    positionMapper.getPositionDetails(positionId)
  }

  def getCompanyHomePage(companyId: Int): CompanyHomePageDTO = {
    companyMapper.getCompanyHomePage(companyId)
  }

  def getCompanyDetails(companyId: Int): CompanyBaseDTO = {
    companyMapper.getCompanyDetails(companyId)
  }

  def getRecruitPosition(companyId: Int, pageOrder: PageOrder): PageResult[RecruitPositionDTO] = {
    PageHelper.startPage(pageOrder.getCurrent, pageOrder.getPageSize)
    PageHelper.orderBy(pageOrder.getOrderBy(classOf[Position]))
    val list = positionMapper.getRecruitPosition(companyId)
    val pageInfo = new PageInfo[RecruitPositionDTO](list)
    val pageResult = new PageResult[RecruitPositionDTO](pageOrder, pageInfo)
    pageResult
  }
}
